class Enemy extends GameObject {
  private int moveDir = 1;

  public Enemy(int[] position, int speedDelay) {
    super(SPR_ENEMY);
    this.position   = position.clone();
    this.speedDelay = speedDelay;
    this.pointValue = PT_ENEMY;
  }

  @Override protected void move() {
    position[0] += moveDir;

    if (position[0] >= Board.BOARD_SIZE_X || position[0] < 0) {
      position = new int[]{
        position[0] - moveDir,
        position[1] + 1
      };
      moveDir  *= -1;
    }

    if (position[1] >= Board.BOARD_SIZE_Y) 
      isDead = true;
    }
  
}

class EnemyController implements Constants {
  private int speedDelay = SPD_ENEMY;
  private int speedCounter = 0;
  private boolean hasEnemyReady = false;

  public void update() {
    speedCounter++;
    if (speedCounter == speedDelay) {
      speedCounter = 0;
      hasEnemyReady = true;
    }
  }

  public boolean hasEnemyReady() {
    return hasEnemyReady;
  }

  public Enemy createEnemy() {
    hasEnemyReady = false;
    return new Enemy(new int[] { 0, 0 }, speedDelay);
  }
}



private byte[][] enemyBlockTemplate = new byte[][] {
  { 1, 1, 1, 1, 1 },
  { 1, 1, 1, 1, 1 },
  { 0, 1, 1, 1, 0 },
};

private byte[][] enemyBlockTemplateReverse = new byte[][] {
  { 0, 1, 1, 1, 0 },
  { 1, 1, 1, 1, 1 },
  { 1, 1, 1, 1, 1 },
};